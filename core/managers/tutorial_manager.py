"""
Sistema de tutorial completo para o jogo ZORG.
Gerencia dicas contextuais e tutoriais baseados em TutorialFlags.
"""
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

from core.managers.base_manager import BaseManager
from core.models import TutorialFlags
from utils.logging_config import get_logger

logger = get_logger("tutorial_manager")


class TutorialTrigger(Enum):
    FIRST_COMBAT = "first_combat"
    FIRST_ABILITY_USE = "first_ability_use"
    FIRST_ITEM_USE = "first_item_use"
    FIRST_LEVEL_UP = "first_level_up"
    FIRST_EQUIPMENT = "first_equipment"
    SAVE_GAME = "save_game"
    CITY_ENTRY = "city_entry"
    SHOP_ENTRY = "shop_entry"
    INVENTORY_FULL = "inventory_full"
    LOW_HP = "low_hp"
    BOSS_FIGHT = "boss_fight"
    STATUS_EFFECTS = "status_effects"
    QUEST_RECEIVED = "quest_received"


@dataclass
class TutorialStep:
    title: str
    content: List[str]
    visual_hint: Optional[str] = None
    action_required: Optional[str] = None


@dataclass
class Tutorial:
    id: str
    trigger: TutorialTrigger
    flag_name: str
    steps: List[TutorialStep]
    priority: int = 0
    context_sensitive: bool = True


class TutorialManager(BaseManager):
    """Gerenciador de tutoriais contextuais."""

    def __init__(self):
        super().__init__("tutorial_manager")
        self.tutorials = self._initialize_tutorials()
        self.pending_tutorials = []
        self.active_tutorial = None

    def _initialize_tutorials(self) -> Dict[str, Tutorial]:
        """Inicializa todos os tutoriais do jogo."""
        tutorials = {}

        # Tutorial de combate b√°sico
        tutorials["combat_basic"] = Tutorial(
            id="combat_basic",
            trigger=TutorialTrigger.FIRST_COMBAT,
            flag_name="combate_basico_mostrado",
            steps=[
                TutorialStep(
                    title="üíÄ Seu Primeiro Combate!",
                    content=[
                        "Bem-vinda ao sistema de combate do ZORG!",
                        "Durante o combate, voc√™ pode:",
                        "‚Ä¢ [A]tacar - Usa seu ataque b√°sico",
                        "‚Ä¢ [H]abilidades - Usa habilidades especiais (requer MP)",
                        "‚Ä¢ [I]tens - Usa itens do invent√°rio",
                        "‚Ä¢ [F]ugir - Tenta escapar do combate"
                    ],
                    visual_hint="‚öîÔ∏è Escolha sua a√ß√£o sabiamente!"
                )
            ],
            priority=10
        )

        # Tutorial de habilidades
        tutorials["abilities"] = Tutorial(
            id="abilities",
            trigger=TutorialTrigger.FIRST_ABILITY_USE,
            flag_name="habilidades_mostrado",
            steps=[
                TutorialStep(
                    title="‚ú® Habilidades Especiais",
                    content=[
                        "Habilidades s√£o ataques poderosos que custam MP (Mana Points).",
                        "Diferentes tipos de habilidades:",
                        "‚Ä¢ Ataque - Causam dano extra",
                        "‚Ä¢ Cura - Restauram HP",
                        "‚Ä¢ Buff - Melhoram suas estat√≠sticas",
                        "‚Ä¢ Debuff - Enfraquecem inimigos"
                    ],
                    visual_hint="üí´ Use MP sabiamente - ele n√£o se regenera automaticamente!"
                )
            ],
            priority=8
        )

        # Tutorial de itens
        tutorials["items"] = Tutorial(
            id="items",
            trigger=TutorialTrigger.FIRST_ITEM_USE,
            flag_name="itens_mostrado",
            steps=[
                TutorialStep(
                    title="üß™ Usando Itens",
                    content=[
                        "Itens podem salvar sua vida em situa√ß√µes dif√≠ceis!",
                        "Tipos principais:",
                        "‚Ä¢ Po√ß√µes de Cura - Restauram HP",
                        "‚Ä¢ Po√ß√µes de Mana - Restauram MP",
                        "‚Ä¢ Ant√≠dotos - Curam envenenamento",
                        "‚Ä¢ Itens de Buff - Melhoram temporariamente suas stats"
                    ],
                    visual_hint="üí° Dica: Use itens estrategicamente - alguns s√£o raros!"
                )
            ],
            priority=7
        )

        # Tutorial de level up
        tutorials["level_up"] = Tutorial(
            id="level_up",
            trigger=TutorialTrigger.FIRST_LEVEL_UP,
            flag_name="level_up_mostrado",
            steps=[
                TutorialStep(
                    title="üåü Voc√™ Subiu de N√≠vel!",
                    content=[
                        "Parab√©ns! Subir de n√≠vel traz muitos benef√≠cios:",
                        "‚Ä¢ HP e MP m√°ximos aumentam",
                        "‚Ä¢ Ataque e defesa melhoram",
                        "‚Ä¢ Novas habilidades podem ser desbloqueadas",
                        "‚Ä¢ Acesso a equipamentos melhores"
                    ],
                    visual_hint="‚≠ê Continue derrotando inimigos para ganhar mais XP!"
                )
            ],
            priority=9
        )

        # Tutorial de equipamentos
        tutorials["equipment"] = Tutorial(
            id="equipment",
            trigger=TutorialTrigger.FIRST_EQUIPMENT,
            flag_name="equipamentos_mostrado",
            steps=[
                TutorialStep(
                    title="‚öîÔ∏è Equipamentos",
                    content=[
                        "Equipamentos melhoram suas capacidades de combate:",
                        "‚Ä¢ Armas - Aumentam seu ataque",
                        "‚Ä¢ Armaduras - Aumentam sua defesa",
                        "‚Ä¢ Escudos - Prote√ß√£o extra",
                        "‚Ä¢ Acess√≥rios - B√¥nus especiais"
                    ],
                    visual_hint="üîß Visite a loja para comprar equipamentos melhores!"
                )
            ],
            priority=6
        )

        # Tutorial de save/load
        tutorials["save_load"] = Tutorial(
            id="save_load",
            trigger=TutorialTrigger.SAVE_GAME,
            flag_name="save_load_mostrado",
            steps=[
                TutorialStep(
                    title="üíæ Sistema de Save",
                    content=[
                        "Importante: Salve seu progresso frequentemente!",
                        "‚Ä¢ Use o menu da cidade para salvar",
                        "‚Ä¢ Seus saves ficam protegidos contra corrup√ß√£o",
                        "‚Ä¢ Voc√™ pode carregar um save a qualquer momento",
                        "‚Ä¢ O jogo salva automaticamente em momentos cr√≠ticos"
                    ],
                    visual_hint="‚ö†Ô∏è N√£o deixe para salvar s√≥ no final - acidentes acontecem!"
                )
            ],
            priority=5
        )

        # Tutorial de cidade
        tutorials["city"] = Tutorial(
            id="city",
            trigger=TutorialTrigger.CITY_ENTRY,
            flag_name="cidade_mostrada",
            steps=[
                TutorialStep(
                    title="üèòÔ∏è Bem-vinda a Nullhaven!",
                    content=[
                        "A cidade √© seu ref√∫gio entre as aventuras:",
                        "‚Ä¢ Loja - Compre itens e equipamentos",
                        "‚Ä¢ NPCs - Conversem e aceitem miss√µes",
                        "‚Ä¢ Save/Load - Gerencie seus saves",
                        "‚Ä¢ Status - Veja estat√≠sticas detalhadas"
                    ],
                    visual_hint="üó∫Ô∏è Explore e converse com todos os NPCs!"
                )
            ],
            priority=4
        )

        # Tutorial de status effects
        tutorials["status_effects"] = Tutorial(
            id="status_effects",
            trigger=TutorialTrigger.STATUS_EFFECTS,
            flag_name="status_effects_mostrado",
            steps=[
                TutorialStep(
                    title="üå™Ô∏è Efeitos de Status",
                    content=[
                        "Efeitos tempor√°rios podem afetar o combate:",
                        "‚Ä¢ üü¢ Buffs - Melhoram suas capacidades",
                        "‚Ä¢ üî¥ Debuffs - Prejudicam voc√™ ou inimigos",
                        "‚Ä¢ ‚ò†Ô∏è Veneno - Causa dano cont√≠nuo",
                        "‚Ä¢ üíö Regenera√ß√£o - Cura HP gradualmente"
                    ],
                    visual_hint="‚è∞ Todos os efeitos t√™m dura√ß√£o limitada!"
                )
            ],
            priority=3
        )

        # Tutorial de quests
        tutorials["quests"] = Tutorial(
            id="quests",
            trigger=TutorialTrigger.QUEST_RECEIVED,
            flag_name="quests_mostrado",
            steps=[
                TutorialStep(
                    title="üìú Sistema de Miss√µes",
                    content=[
                        "NPCs podem dar miss√µes valiosas:",
                        "‚Ä¢ Converse com NPCs para descobrir miss√µes",
                        "‚Ä¢ Complete objetivos para ganhar recompensas",
                        "‚Ä¢ XP, ouro e itens especiais te aguardam",
                        "‚Ä¢ Algumas miss√µes desbloqueiam novas √°reas"
                    ],
                    visual_hint="üéØ Verifique seus objetivos no menu de status!"
                )
            ],
            priority=2
        )

        return tutorials

    def check_trigger(self, trigger: TutorialTrigger, player_tutorials: TutorialFlags, **context) -> Optional[Tutorial]:
        """Verifica se algum tutorial deve ser ativado."""
        for tutorial in self.tutorials.values():
            if tutorial.trigger == trigger:
                # Verificar se j√° foi mostrado
                flag_value = getattr(player_tutorials, tutorial.flag_name, True)
                if not flag_value:  # False significa que ainda n√£o foi mostrado
                    return tutorial
        return None

    def queue_tutorial(self, tutorial: Tutorial):
        """Adiciona tutorial √† fila de execu√ß√£o."""
        if tutorial not in self.pending_tutorials:
            self.pending_tutorials.append(tutorial)
            self.pending_tutorials.sort(key=lambda t: t.priority, reverse=True)
            logger.info(f"Tutorial '{tutorial.id}' adicionado √† fila")

    def get_next_tutorial(self) -> Optional[Tutorial]:
        """Retorna o pr√≥ximo tutorial da fila."""
        if self.pending_tutorials:
            return self.pending_tutorials.pop(0)
        return None

    def start_tutorial(self, tutorial: Tutorial):
        """Inicia um tutorial."""
        self.active_tutorial = tutorial
        logger.info(f"Iniciando tutorial: {tutorial.id}")

    def complete_tutorial(self, player_tutorials: TutorialFlags):
        """Marca tutorial atual como completo."""
        if self.active_tutorial:
            setattr(player_tutorials, self.active_tutorial.flag_name, True)
            logger.info(f"Tutorial '{self.active_tutorial.id}' completado")
            self.active_tutorial = None

    def get_tutorial_display(self, tutorial: Tutorial) -> Dict[str, Any]:
        """Retorna dados formatados para exibi√ß√£o do tutorial."""
        if not tutorial.steps:
            return {}

        step = tutorial.steps[0]  # Por simplicidade, usar apenas o primeiro step

        return {
            "title": step.title,
            "content": step.content,
            "visual_hint": step.visual_hint,
            "action_required": step.action_required,
            "can_skip": True
        }

    def should_show_tutorial(self, trigger: TutorialTrigger, player_tutorials: TutorialFlags) -> bool:
        """Verifica se deve mostrar tutorial para um trigger espec√≠fico."""
        tutorial = self.check_trigger(trigger, player_tutorials)
        return tutorial is not None

    def get_contextual_hint(self, context: str, player_tutorials: TutorialFlags) -> Optional[str]:
        """Retorna dica contextual baseada na situa√ß√£o atual."""
        hints = {
            "low_hp": "üí° Dica: Use uma Po√ß√£o de Cura quando seu HP estiver baixo!",
            "no_mp": "üí° Dica: Use Po√ß√µes de Mana para restaurar MP e usar habilidades!",
            "inventory_full": "üí° Dica: Seu invent√°rio est√° cheio! Venda itens desnecess√°rios na loja.",
            "boss_approaching": "‚ö†Ô∏è Cuidado: Um chefe poderoso se aproxima! Prepare-se bem.",
            "new_area": "üó∫Ô∏è Voc√™ entrou em uma nova √°rea. Explore com cuidado!",
            "status_poisoned": "‚ò†Ô∏è Voc√™ est√° envenenado! Use um Ant√≠doto rapidamente.",
            "equipment_damaged": "üîß Seus equipamentos est√£o danificados. Visite um ferreiro."
        }

        # Verificar se j√° mostrou tutoriais relacionados
        if context == "low_hp" and not player_tutorials.itens_mostrado:
            return hints.get("low_hp")
        elif context == "no_mp" and not player_tutorials.habilidades_mostrado:
            return hints.get("no_mp")

        return hints.get(context)

    def get_tutorial_progress(self, player_tutorials: TutorialFlags) -> Dict[str, bool]:
        """Retorna progresso dos tutoriais."""
        return {
            "Combate B√°sico": player_tutorials.combate_basico_mostrado,
            "Habilidades": player_tutorials.habilidades_mostrado,
            "Itens": player_tutorials.itens_mostrado,
            "Level Up": player_tutorials.level_up_mostrado,
            "Equipamentos": player_tutorials.equipamentos_mostrado,
            "Save/Load": player_tutorials.save_load_mostrado
        }

    def reset_all_tutorials(self, player_tutorials: TutorialFlags):
        """Reseta todos os tutoriais (√∫til para testes)."""
        player_tutorials.combate_basico_mostrado = False
        player_tutorials.habilidades_mostrado = False
        player_tutorials.itens_mostrado = False
        player_tutorials.level_up_mostrado = False
        player_tutorials.equipamentos_mostrado = False
        player_tutorials.save_load_mostrado = False
        logger.info("Todos os tutoriais foram resetados")


# Fun√ß√µes utilit√°rias para f√°cil integra√ß√£o
def create_tutorial_manager() -> TutorialManager:
    """Factory function para criar manager de tutorial."""
    return TutorialManager()


def check_tutorial_trigger(trigger: TutorialTrigger, player_tutorials: TutorialFlags, manager: TutorialManager) -> Optional[Dict[str, Any]]:
    """Fun√ß√£o helper para verificar e obter tutorial."""
    tutorial = manager.check_trigger(trigger, player_tutorials)
    if tutorial:
        return manager.get_tutorial_display(tutorial)
    return None